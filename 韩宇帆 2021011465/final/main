import random
import string

class CityWeatherIterator:
    def __init__(self, city_weather):
        self.city_weather = city_weather
        self.index = 0

    def __iter__(self):
        return self

    def __next__(self):
        if self.index >= len(self.city_weather):
            raise StopIteration
        result = self.city_weather[self.index]
        self.index += 1
        return result

class CityWeather:
    def __init__(self, *cities):
        self.cities = cities

    def __iter__(self):
        return CityWeatherIterator(self.cities)

    def get_weather(self, city):
        return f"The weather of {city} is sunny"

def dataSampling(dataType, datarange, num, strlen=8):
    result = []
    for index in range(num):
        if dataType == int:
            it = iter(datarange)
            item = random.randint(next(it), next(it))
            result.append(item)
        elif dataType == float:
            it = iter(datarange)
            item = random.uniform(next(it), next(it))
            result.append(item)
        elif dataType == str:
            item = ''.join(random.SystemRandom().choice(datarange) for _ in range(strlen))
            result.append(item)
    return result

def dataOperation(*args):
    def decorator(func):
        def wrapper(*args, **kwargs):
            result = func(*args, **kwargs)

            if 'sum' in args:
                result_sum = sum(result)
                print("Sum:", result_sum)

            if 'avg' in args:
                result_avg = sum(result) / len(result)
                print("Average:", result_avg)

            return result

        return wrapper

    return decorator

@dataOperation('sum', 'avg')
def structDataSampling(num, struct):
    result = []
    for _ in range(num):
        element = {}
        for key, value in struct.items():
            element[key] = dataSampling(key, value['datarange'], 1, value.get('len', 8))
        result.append(element)
    return result


def run_job(job_number):
    if job_number == 1:
        city_weather = CityWeather('Beijing', 'Shanghai', 'Guangzhou')
        for weather in city_weather:
            print(weather)
    elif job_number == 2:
        int_data = dataSampling(int, (0, 100), 5)
        float_data = dataSampling(float, (0, 100), 3)
        str_data = dataSampling(str, string.ascii_letters, 4)
        print(int_data)
        print(float_data)
        print(str_data)
    elif job_number == 3:
        result = structDataSampling(10, {'int': {'datarange': (0, 10)}, 'str': {'datarange': string.ascii_letters + "&*_", 'len': 10}, 'float': {'datarange': (0.0, 1.0)}})
        print(result)
    else:
        print("Invalid job number!")

if __name__ == "__main__":
    job_number = int(input("请输入要运行的作业号（1、2或3）："))
    run_job(job_number)
